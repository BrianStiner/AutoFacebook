Replace text files with variables in the .env file and include all the editable parameters to be loaded from the dotenv.
Search and eliminate errors. Improve the webapp.

file:".env"

OPENAI_API_KEY="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"

MODEL="gpt-3.5-turbo"
AGENT1_NAME="agent1"
AGENT1_TEMPERATURE=0.5
AGENT1_MAX_TOKENS=1000

AGENT2_NAME="agent2"
AGENT2_TEMPERATURE=0.5
AGENT2_MAX_TOKENS=1000

GOAL="Use the streaming feature of the API to have colorful conversations in a text box and a GUI with buttons and sliders using flask"

AGENT1_INITIAL_MEMORY="You are "+AGENT1_NAME+". You're a developer bot working alongside "+AGENT2_NAME+"."+GOAL
AGENT2_INITIAL_MEMORY="You are "+AGENT2_NAME+". You're a developer bot working alongside "+AGENT1_NAME+"."+GOAL

file:"run.py"

import os
import openai
from dotenv import load_dotenv
import json

# Load environment variables
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

# Define the Agent class
class Agent:
    def __init__(self, name, initial_prompt_file, model="gpt-3.5-turbo", temperature=0.8):
        self.name = name
        self.model = model
        self.temperature = temperature
        self.memory = []

        with open(initial_prompt_file, 'r') as file:
            initial_prompt = file.read()
            self.memory.append({"role": "system", "content": initial_prompt})

    def generate_message(self, messages):
        response = openai.ChatCompletion.create(
            model=self.model,
            messages=messages,
            temperature=self.temperature
        )
        return response.choices[0].message.content.strip()

# Initialize agents
agent1 = Agent("Agent1", "agent1_initial_prompt.txt")
agent2 = Agent("Agent2", "agent2_initial_prompt.txt")

# load the code
with open("code.txt", "r") as file:
    code = file.read()

# Start the conversation
agent2.memory.append({"role": "user", "content": code})
conversation = agent1.memory + agent2.memory
iterations = 3

for i in range(iterations):
    conversation.append({
        "role": "user",
        "name": agent1.name,
        "content": agent1.generate_message(conversation)
    })
    conversation.append({
        "role": "user",
        "name": agent2.name,
        "content": agent2.generate_message(conversation)
    })

# Save the conversation to a file
with open("chat_output.txt", "w") as output_file:
    for message in conversation:
        role = message["role"]
        content = message["content"]
        if "name" in message:
            name = message["name"]
            output_file.write(f"{name}: {content}\n")
        else:
            output_file.write(f"{role}: {content}\n")

file:"app.py"

from flask import Flask, render_template, request, jsonify
from threading import Lock
import conversation_script

app = Flask(__name__)
lock = Lock()

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/get_conversation', methods=['POST'])
def get_conversation():
    with lock:
        conversation_script.main()
        with open("chat_output.txt", "r") as file:
            conversation = file.read()
    return jsonify(conversation=conversation)

if __name__ == "__main__":
    app.run(debug=True)

file:"index.html"

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Agent Conversation</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1>Agent Conversation</h1>
    <button id="start-conversation">Start Conversation</button>
    <pre id="conversation"></pre>

    <script>
        $(document).ready(function() {
            $("#start-conversation").click(function() {
                $.post("/get_conversation", {}, function(data) {
                    $("#conversation").text(data.conversation);
                });
            });
        });
    </script>
</body>
</html>
